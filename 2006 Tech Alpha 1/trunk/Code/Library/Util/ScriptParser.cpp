// - ------------------------------------------------------------------------------------------ - //
#include <iostream>
#include <sstream>
#include <fstream>
#include <map>
using namespace std;

// - ------------------------------------------------------------------------------------------ - //
#include "ScriptParser.h"
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
void cScriptParser::LoadFile( const std::string& File ) {
	char Line[1024];
	
	map< string, string > SymbolTable;
	
	ifstream InFile( File.c_str() );
		
	int LineNumber = 1;
	NodeCount = 0;
	
	// Read a line from the file //
	InFile.getline( Line, sizeof( Line ) );
	while( !InFile.eof() ) {
		// Populate and use a string stream to tokenize the data //
		stringstream Text;
		Text << Line;
		
		int TokenNumber = 0;
		
		// Read all the tokens from that string //
		string Token;
		while( !Text.eof() ) {
			// Read next token //
			Text >> Token;
			
			// Test to make sure this line/token isn't stupid and blank //
			if ( Token == "" )
				break;
			
			// Test if a comment //
			if ( Token.substr( 0, 2 ) == "//" )
				break;

			// Error check - Too many tokens //
			if ( TokenNumber > 4 ) {
				Log( LOG_LOAD_MESH, 
					"Error: Too many arguments found for command \"" << 
					Instruction.back().Command << "\" on line " << LineNumber
					);
				break;
			}

			// If the first token, add an instruction, otherwise add an argument //
			if ( TokenNumber == 0 ) {
				if ( Token == "Symbol" ) {
					string LookUp, Value;
					Text >> LookUp;
					Text >> Value;
					
					SymbolTable[ LookUp ] = Value;
					break;
				}
				else if ( Token == "Node" )
					NodeCount++;
				
				Instruction.push_back( cInstruction() );
				Instruction.back().Command = Token;
			}
			else {
				if ( SymbolTable[ Token ] != "" )
					Instruction.back().Arg[ TokenNumber - 1 ] = SymbolTable[ Token ];
				else
					Instruction.back().Arg[ TokenNumber - 1 ] = Token;
			}
			
			// Increment out token number //
			TokenNumber++;
		};

		// Read next line //	
		InFile.getline( Line, sizeof( Line ) );	
		LineNumber++;
	};
}
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
void cScriptParser::SaveFile( const std::string& File ) const {
	ofstream OutFile( File.c_str() );
	
	OutFile << "// Generated by Spider/PuffBOMB Engine //" << endl;
	
	for( size_t idx = 0; idx < Instruction.size(); idx++ ) {
		OutFile << Instruction[ idx ].Command << "\t" <<
			Instruction[ idx ].Arg[ 0 ] << "\t" <<
			Instruction[ idx ].Arg[ 1 ] << "\t" <<
			Instruction[ idx ].Arg[ 2 ] << "\t" <<
			Instruction[ idx ].Arg[ 3 ] <<
			endl;
	}
}
// - ------------------------------------------------------------------------------------------ - //
void cScriptParser::Append(
	std::string _Command,
	double _Arg0
	)
{
	std::stringstream Text[1];

	Text[0] << _Arg0;
	
	Append( _Command, Text[0].str() );

}
// - ------------------------------------------------------------------------------------------ - //
void cScriptParser::Append(
	std::string _Command,
	double _Arg0,
	double _Arg1
	)
{
	std::stringstream Text[2];

	Text[0] << _Arg0;
	Text[1] << _Arg1;
	
	Append( _Command, Text[0].str(), Text[1].str() );

}
// - ------------------------------------------------------------------------------------------ - //
void cScriptParser::Append(
	std::string _Command,
	std::string _Arg0,
	double _Arg1
	)
{
	std::stringstream Text[1];
	Text[0] << _Arg1;
	
	Append( _Command, _Arg0, Text[0].str() );

}
// - ------------------------------------------------------------------------------------------ - //
void cScriptParser::Append(
	std::string _Command,
	double _Arg0,
	double _Arg1,
	double _Arg2
	)
{
	std::stringstream Text[3];

	Text[0] << _Arg0;
	Text[1] << _Arg1;
	Text[2] << _Arg2;
	
	Append( _Command, Text[0].str(), Text[1].str(), Text[2].str());
}
// - ------------------------------------------------------------------------------------------ - //
void cScriptParser::Append(
	std::string _Command,
	double _Arg0,
	double _Arg1,
	double _Arg2,
	double _Arg3
	)
{
	std::stringstream Text[4];

	Text[0] << _Arg0;
	Text[1] << _Arg1;
	Text[2] << _Arg2;
	Text[3] << _Arg3;
	
	Append( _Command, Text[0].str(), Text[1].str(), Text[2].str(), Text[3].str() );
}
// - ------------------------------------------------------------------------------------------ - //
