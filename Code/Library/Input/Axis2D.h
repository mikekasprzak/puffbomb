// - ------------------------------------------------------------------------------------------ - //
// Axis2D //
// - ------------------------------------------------------------------------------------------ - //
#ifndef __Input_Axis2D_H__
#define __Input_Axis2D_H__
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
#include <Geometry/Vector.h>
// - ------------------------------------------------------------------------------------------ - //

namespace Input {

// - ------------------------------------------------------------------------------------------ - //
	class cAxis2D: public Vector2D {
	private:
		//Vector2D _Current;
		Vector2D _Last;
	
		Vector2D _Digital;
	
	public:
		// - ---------------------------------------------------------------------------------- - //
		inline const Vector2D& Current() const {
			return *this;
		}
		// - ---------------------------------------------------------------------------------- - //
		inline const Vector2D& Last() const {
			return _Last;
		}
		// - ---------------------------------------------------------------------------------- - //
		inline const Vector2D Diff() const {
			return (_Last - *this);
		}
		// - ---------------------------------------------------------------------------------- - //

		// - ---------------------------------------------------------------------------------- - //
		inline operator const Vector2D& () {
			return Current();
		}
		// - ---------------------------------------------------------------------------------- - //

		// - ---------------------------------------------------------------------------------- - //
		inline const Vector2D Digital() const {
			return _Digital;
		}
		// - ---------------------------------------------------------------------------------- - //
		inline int DigitalBitMask() const {
			// Return the value of the axis as digital bitmask (bits for up,down,left and right) //
			
			// *note* - Create variations so you can get new presses and releases too //
			return 0;
		}
		// - ---------------------------------------------------------------------------------- - //
		
	
	public:
		// - ---------------------------------------------------------------------------------- - //
		inline cAxis2D() {
		}	
		// - ---------------------------------------------------------------------------------- - //
		inline void Reset() {
			Set( Vector2D::Zero );
			_Last = Vector2D::Zero;
		}
		// - ---------------------------------------------------------------------------------- - //		
		inline void Update( const Vector2D& NewState ) {
			_Last = *this;
			Set( NewState );
			
			// Calculate the axis as digital (no analog smoothness) //
			_Digital.x = ((x.Abs() > Real::Half )? Real::One : Real::Zero ) * x.Normal();
			_Digital.y = ((y.Abs() > Real::Half )? Real::One : Real::Zero ) * y.Normal();
			
		}
		// - ---------------------------------------------------------------------------------- - //
	};
// - ------------------------------------------------------------------------------------------ - //

};

// - ------------------------------------------------------------------------------------------ - //
#endif // __Input_Axis2D_H__ //
// - ------------------------------------------------------------------------------------------ - //
