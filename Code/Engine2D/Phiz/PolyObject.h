// - ------------------------------------------------------------------------------------------ - //
// PolyObject //
// - ------------------------------------------------------------------------------------------ - //
#ifndef __Phiz_PolyObject_H__
#define __Phiz_PolyObject_H__
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
#include <vector>
// - ------------------------------------------------------------------------------------------ - //
#include <Util/Debug.h>
#include <Graphics/Gfx.h>
// - ------------------------------------------------------------------------------------------ - //
#include <Geometry/Real.h>
#include <Geometry/Rect.h>
// - ------------------------------------------------------------------------------------------ - //
#include <Global.h>

#include "DynamicNodes.h"

#include "Constraints/Spring.h"
#include "Constraints/Hard.h"
#include "Constraints/Triangle.h"
#include "Constraints/Quad.h"
// - ------------------------------------------------------------------------------------------ - //
#include <Util/ScriptParser.h>
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
class cPolyObject: public cDynamicNodes {
public:
	std::vector< cSpring > Spring;
	std::vector< cTriangle > Triangle;
	std::vector< cQuad > Quad;
	
	// Hard constraints that lock to a point //	
	std::vector< cHard >  Hard;

public:	
	// Bounding Rectangle of all colliding objects //
	typedef RadiusRect2D RectType;
	RectType BoundingRect;

public:	
	// Information Flags About the Object (Set by various parts of the engine) //
	enum {
		flActive = bit31,
	};

	int Flags;
	// Number of times to run the collision code //
	int Control;
	
public:
	// - -------------------------------------------------------------------------------------- - //
	cPolyObject( const cScriptParser& Obj, const Real _x, const Real _y );
	// - -------------------------------------------------------------------------------------- - //
	void Step();
	// - -------------------------------------------------------------------------------------- - //
	void Solve( cPolyObject& Vs );
	void Solve( class cSphereObject& Vs );
	void Solve( class cStaticObject& Vs );
	// - -------------------------------------------------------------------------------------- - //
	// Should probably take a camera or camera matrix as an argument //
	void DebugDraw( /*const Vector2D& Offset*/ );
	// - -------------------------------------------------------------------------------------- - //	
	void Reset();
	// - -------------------------------------------------------------------------------------- - //	
	void SetHome();
	// - -------------------------------------------------------------------------------------- - //
	void CalcBoundingRect();
	// - -------------------------------------------------------------------------------------- - //
	void CalcNormals();	
	// - -------------------------------------------------------------------------------------- - //		
	// - -------------------------------------------------------------------------------------- - //	
	inline void ClearFlags() {
		Flags &= flActive;
//		for ( size_t idx = 0; idx < size(); idx ++ ) {
//			Sphere[ idx ].Flags = 0;
//		}
	}
	// - -------------------------------------------------------------------------------------- - //
	inline bool IsActive() {
		return Flags & flActive;
	}
	// - -------------------------------------------------------------------------------------- - //
	inline void SetActive() {
		Flags |= flActive;
	}	
	// - -------------------------------------------------------------------------------------- - //
	inline void SetInactive() {
		Flags &= ~flActive;
	}	
	// - -------------------------------------------------------------------------------------- - //
};
// - ------------------------------------------------------------------------------------------ - //

// - ------------------------------------------------------------------------------------------ - //
#endif // __Phiz_PolyObject_H__ //
// - ------------------------------------------------------------------------------------------ - //
