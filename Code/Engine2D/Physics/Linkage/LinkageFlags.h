// - ------------------------------------------------------------------------------------------ - //
// LinkageFlags //
// - ------------------------------------------------------------------------------------------ - //
#ifndef __Engine2D_Physics_Body2D_LinkageFlags_H__
#define __Engine2D_Physics_Body2D_LinkageFlags_H__
// - ------------------------------------------------------------------------------------------ - //
#include <Util/ClassDesigner.h>
// - ------------------------------------------------------------------------------------------ - //
namespace Engine2D {
// - ------------------------------------------------------------------------------------------ - //
class cLinkageFlags: public cBasicFlags {
public:
	// - -------------------------------------------------------------------------------------- - //
	// Linkage Flags ---------------- //
	enum {
		flActive = bit0,			// If the Link is active //
		flBreakable = bit1,			// If the Link is breakable //

		flBroken = bit4,			// If the Link is broken //
		flIgnoreMinimum = bit5,		// Don't solve if the distance is less than my length //
		flIgnoreMaximum = bit6,		// Don't solve if the distance is greater than my length //
	};
	// - -------------------------------------------------------------------------------------- - //

public:
	// - -------------------------------------------------------------------------------------- - //
	inline cLinkageFlags() :
		cBasicFlags( flActive | flBreakable )
	{
	}
	// - -------------------------------------------------------------------------------------- - //
	inline cLinkageFlags( const FlagType _Flags ) :
		cBasicFlags( _Flags )
	{
	}
	// - -------------------------------------------------------------------------------------- - //

public:
	// - -------------------------------------------------------------------------------------- - //
	// Create functions for setting individual flags ------------------------------------------ - //
	// - -------------------------------------------------------------------------------------- - //
	#define __FLAG_FUNCTION( _flag ) \
	inline cLinkageFlags& Set ## _flag() { \
		Flags |= fl ## _flag; \
		return *this; \
	}
	// - -------------------------------------------------------------------------------------- - //
	__FLAG_FUNCTION( Active );
	__FLAG_FUNCTION( Broken );
	__FLAG_FUNCTION( Breakable );
	__FLAG_FUNCTION( IgnoreMinimum );
	__FLAG_FUNCTION( IgnoreMaximum );
	// - -------------------------------------------------------------------------------------- - //
	#undef __FLAG_FUNCTION
	// - -------------------------------------------------------------------------------------- - //

public:
	// - -------------------------------------------------------------------------------------- - //
	// Create functions for resetting individual flags ---------------------------------------- - //
	// - -------------------------------------------------------------------------------------- - //
	#define __FLAG_FUNCTION( _flag ) \
	inline cLinkageFlags& Reset ## _flag() { \
		Flags &= ~(fl ## _flag); \
		return *this; \
	}
	// - -------------------------------------------------------------------------------------- - //
	__FLAG_FUNCTION( Active );
	__FLAG_FUNCTION( Broken );
	__FLAG_FUNCTION( Breakable );
	__FLAG_FUNCTION( IgnoreMinimum );
	__FLAG_FUNCTION( IgnoreMaximum );
	// - -------------------------------------------------------------------------------------- - //
	#undef __FLAG_FUNCTION
	// - -------------------------------------------------------------------------------------- - //

public:
	// - -------------------------------------------------------------------------------------- - //
	// Create functions for Testing individual flags ------------------------------------------ - //
	// - -------------------------------------------------------------------------------------- - //
	#define __FLAG_FUNCTION( _flag ) \
	inline const bool _flag() const { \
		return Flags & (fl ## _flag); \
	}
	// - -------------------------------------------------------------------------------------- - //
	__FLAG_FUNCTION( Active );
	__FLAG_FUNCTION( Broken );
	__FLAG_FUNCTION( Breakable );
	__FLAG_FUNCTION( IgnoreMinimum );
	__FLAG_FUNCTION( IgnoreMaximum );
	// - -------------------------------------------------------------------------------------- - //
	#undef __FLAG_FUNCTION
	// - -------------------------------------------------------------------------------------- - //

public:
	// - -------------------------------------------------------------------------------------- - //
	// Create functions for Testing individual flags only ------------------------------------- - //
	// - -------------------------------------------------------------------------------------- - //
	#define __FLAG_FUNCTION( _flag ) \
	inline const bool Only ## _flag() const { \
		return Flags == (fl ## _flag); \
	}
	// - -------------------------------------------------------------------------------------- - //
	__FLAG_FUNCTION( Active );
	__FLAG_FUNCTION( Broken );
	__FLAG_FUNCTION( Breakable );
	__FLAG_FUNCTION( IgnoreMinimum );
	__FLAG_FUNCTION( IgnoreMaximum );
	// - -------------------------------------------------------------------------------------- - //
	#undef __FLAG_FUNCTION
	// - -------------------------------------------------------------------------------------- - //
	
public:
	// - -------------------------------------------------------------------------------------- - //
	// If we're active and not broken --------------------------------------------------------- - //
	inline const bool ActiveAndNotBroken() const {
		if ( Active() )
			return !Broken();
		return false;
	}
};
// - ------------------------------------------------------------------------------------------ - //
}; // namespace Engine2D //
// - ------------------------------------------------------------------------------------------ - //
#endif // __Engine2D_Physics_LinkageFlags_H__ //
// - ------------------------------------------------------------------------------------------ - //
